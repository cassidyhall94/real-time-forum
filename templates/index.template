{{- define "toContent"}}
<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="static/styles/styles.css" type="text/css">
    <link rel="shortcut icon" href="static/images/favicon/favicon-32x32.png" type="image/x-icon">
    <title>Real Time Forum</title>
</head>

<body>
    <header>01 Founders
        <button id="post"
            onclick="contentSocket.sendContentRequest(event); postSocket.sendSubmittedPostsRequest()">Home</button>
        <button id="login" onclick="contentSocket.sendContentRequest(event)">Login/Register</button>
        <button id="profile" onclick="contentSocket.sendContentRequest(event)">Profile</button>
        <button id="logout" onclick="contentSocket.sendContentRequest(event); clearSessionCookie()">Logout</button>

        <h5 id="welcome"></h5>
    </header>
    <div class="main-container">
        <article>
            <div id="postcontainer">
                <form id="postform" onsubmit="return false">
                    <h3>SUBMIT A POST</h3>
                    <div class="titleField">
                        <input type="text" style="width: 200px; text-align: center" id="posttitle" name="title"
                            placeholder="Enter your Title" required />
                    </div>
                    <div class="categoryField">
                        <input type="text" style="width: 200px; text-align: center" id="category" name="category"
                            placeholder="Enter your Category" required />
                    </div>
                    <div class="postBodyField">
                        <input type="text" style="width: 200px; height: 200px; text-align: center" id="postbody"
                            name="postbody" placeholder="Enter your Post Body" required />
                    </div>
                    <button id="postButton" style="margin-top: 10px; margin-bottom: 10px"
                        onclick="postSocket.sendNewPostRequest(event)">Submit</button>
                </form>
            </div>
        </article>
        <section>
            <div id="content">
{{end}}
{{define "fromContent"}}
            </div>
        </section>
        <aside>
            <div id="presencecontainer">
            </div>
        </aside>
    </div>
    <footer></footer>
    <iframe name="dummyframe" id="dummyframe" style="display: none;"></iframe>
    <script src="static/websocket.js"></script>
    <script>
        const clearSessionCookie = () => {
            document.cookie = 'forum-session=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        }

        const getSessionCookie = () => {
            var cookieString = document.cookie;
            var cookies = cookieString.split(";");

            var cookie = cookies.find(function (cookie) {
                return cookie.trim().startsWith("forum-session=");
            });

            if (cookie) {
                let s = cookie.split("=")[1]
                if (s.length > 0) {
                    return s
                }
            }
            return ""
        }

        let contentSocket = new MySocket();
        let postSocket = new MySocket();
        let chatSocket = new MySocket();
        let presenceSocket = new MySocket();
        const socketSetup = () => {
            contentSocket.connectSocket("content", contentSocket.contentHandler);
            postSocket.connectSocket("post", postSocket.postHandler);
            chatSocket.connectSocket("chat", chatSocket.chatHandler);
            presenceSocket.connectSocket("presence", presenceSocket.presenceHandler);
        }
        let user = async () => {
            me = await fetch("/me")
            meJSON = await me.json()
            document.getElementById("welcome").innerText = "Hello " + meJSON.nickname
            return meJSON
        }

        const initialiseConnections = () => {
            if (getSessionCookie() !== "") {
                try {
                    user()
                    socketSetup()
                    clearInterval(setupInterval)
                } catch(e) {
                    console.error(e)
                }
            }
        }
        
        const setupInterval = setInterval(initialiseConnections, 1000)
    </script>

</body>

</html>
{{end}}
{{ template "toContent" }}
{{ template "fromContent" }}